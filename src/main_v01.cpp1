#include <Arduino.h>
#include <Adafruit_NeoPixel.h>
#include <TM1638.h>

/*


NOTES:
  Try new loop



First pezduk(player) runs the deciepher (lnk), which runs (with the help of "diagnostics") each game:

1. Wires:
  Connect each wire to the socket of the same color
  Can be done or undone
  if undone power = 0
  when redone power restores to previous level ( NOT READY )

2. Tumblers:
  If left led is Green and right led is green:
    Switch tumblers to turn all leds on
  If left led if Blue:
    Switch tumblers to turn on only leds of same color as right led
  If left led is Green and right is not green:
    Switch tumblers to turn on leds which has the sum of 21
    (RED = 5, GREEN = 7, BLUE = 4, FUKSIA = 6, WHITE = 1)
      hint(RRGB, FFRB, BBFG, WFGG, WBRRF, WBBFF, WBBRG, WWFFG, WWRGG, WWBBRF)

  after each run complete rot

3. Rotator with button:
  Rotate the knob to has right led lit on. When you succeed it will turn yellow. (NOW DONE)
  Push the button so led will turn green
  Wait and count how many times led flashes, then press button slowly that amount of times
  So left led will be lit on

4. Deceipher (regulator):
  Complete two passes of regularation

For scientific look lets take 1 point as 1 Amp

Wires gets you 1 Amp
Each Tumblers + Rotator with Button gets you 1 Amp
LNK itself gets you last possible amp

*/


// =============================== TODO =====================

/*
  wires:
    [ ] undone mechanics
  rot:
    [X] button pressing
    [ ] more variants
  general:
    [ ] Test loop!            #test!
    [ ] ir reciever
    [ ] ir sender
  network:
    [ ] network
  LnK:
    [X] LnK
    [ ] LnK millis work
*/

// ===================   GENERAL
#define LED_PIN 22
#define LED_NUM 29

Adafruit_NeoPixel strip = Adafruit_NeoPixel(LED_NUM, LED_PIN, NEO_GRB + NEO_KHZ800);

#define RED strip.Color(255, 0, 0)
#define GREEN strip.Color(0, 255, 0)
#define BLUE strip.Color(0, 0, 255)
#define FUKSIA strip.Color(255, 0, 255)
#define WHITE strip.Color(255, 255, 255)

uint8_t power_leds[5] = {11, 12, 13, 14, 15}; // Bottom to top
unsigned int power = 0; // power 0 to 5
int done_games[3] = {0,0,0}; // wires, tumblers, lnk (button comes with tumblers)
uint8_t side_leds[2] = {0, 26}; //LEFT, RIGHT

// ===================    WIRE CONNECT
#define WIRES_REVERSE false // using pullup and low signal instead of input and high (can be helpful in case of unstable work)
uint8_t wires_mode = 0; // 0 - not started, 1 - running, 2 - win, 3 - failed
int wires_gr_1[5] = {34, 36, 38, 40, 42};
int wires_gr_2[5] = {35, 37, 39, 41, 43};
uint32_t wires_colors_1[5] = {RED, GREEN, BLUE, FUKSIA, WHITE};
uint32_t wires_colors_2[5] = {RED, GREEN, BLUE, FUKSIA, WHITE};
int wires_colors_1_leds[5] = {14, 15, 16, 17, 18};
int wires_colors_2_leds[5] = {19, 20, 21, 22, 23};

bool wires_start(){ // Call on start
  // PinModes
  for(int i = 0; i < 5; i++){
    pinMode(wires_gr_1[i], OUTPUT);
    digitalWrite(wires_gr_1[i], LOW);
    pinMode(wires_gr_2[i], INPUT);
  }
  randomSeed(analogRead(A2));
  // Colors shuffling 
  for (int i = 0; i < 5; i++){
    // 1 line
    int j = random(0, 5);
    uint32_t _tmp = wires_colors_1[j];
    wires_colors_1[j] = wires_colors_1[i];
    wires_colors_1[i] = _tmp;
    // 2 line
    j = random(0, 5);
    _tmp = wires_colors_2[j];
    wires_colors_2[j] = wires_colors_2[i];
    wires_colors_2[i] = _tmp;
  }
  // LEDs output TODO: maybe animation of start?
  for(int i = 0; i < 5; i++){
    strip.setPixelColor(wires_colors_1_leds[i], wires_colors_1[i]);
    strip.setPixelColor(wires_colors_2_leds[i], wires_colors_2[i]);
  }
  strip.show();
  wires_mode = 1;
  Serial.println("Wires started");
  return true;
}

bool wires_loop(){ // Call in loop
  for(int i = 0; i < 5; i++){
    digitalWrite(wires_gr_1[i], LOW);
  }
  uint8_t done = 0;
  uint8_t sum = 0;
  done = 0;
  sum = 0;
  // Check if connections are right
  for(int out = 0; out < 5; out++){
    digitalWrite(wires_gr_1[out], HIGH);
    for(int in = 0; in < 5; in++){
      if(digitalRead(wires_gr_2[in]) ==  HIGH){
        sum++;
        if(wires_colors_1[out] == wires_colors_2[in]){
          done++;
        }
      }
    }
    digitalWrite(wires_gr_1[out], LOW);
  }
  static unsigned long _timer = millis();
  if(millis() - _timer > 500){
    Serial.println("SUM  DONE");
    Serial.print(sum);
    Serial.print("     ");
    Serial.println(done);
    _timer = millis();
  }
  if(done == sum && sum == 5){
    wires_mode = 2;
    done_games[0] = 1;
    return true;
  }
  return false;
}


void wires_done(){
  static unsigned long _timer = millis();
  if(millis() - _timer < 300){return;}
  else {_timer = millis();}
  strip.setPixelColor(wires_colors_1_leds[random(0,5)], wires_colors_1[random(0,5)]);
  
  strip.setPixelColor(wires_colors_2_leds[random(0,5)], wires_colors_2[random(0,5)]);
}

// ===================    TUMBLERS

uint8_t tmb_mode = 0; // same as wires
bool hardmode = false;
uint8_t tmb_pins[10] = {25, 27, 29, 31, 33, 32, 30, 28, 26, 24};//{24, 26, 28, 30, 32, 25, 27, 29, 31, 33};
uint8_t tmb_leds[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
uint32_t tmb_colors[10] = {RED, GREEN, BLUE, FUKSIA, WHITE, RED, GREEN, BLUE, FUKSIA, WHITE};
bool tmb_data[10];

bool tmb_start(){
  static bool started = false;
  tmb_mode = 1;
  if(started){return started;}
  randomSeed(analogRead(A5));
  for(int i = 0; i < 10; i++){
    pinMode(tmb_pins[i], INPUT_PULLUP);
    tmb_data[i] = random(0, 2);
  }
  // Colors shuffling 
  for (int i = 0; i < 10; i++){
    // 1 line
    int j = random(0, 10);
    uint32_t _tmp = tmb_colors[j];
    tmb_colors[j] = tmb_colors[i];
    tmb_colors[i] = _tmp;
    if(hardmode){ // shuffle tumblers if hardmode
      j = random(0, 10);
      uint8_t _tmp_tbl = tmb_pins[j];
      tmb_pins[j] = tmb_pins[i];
      tmb_pins[i] = _tmp_tbl;
    }
  }
  started = true;
  return true;
}

bool tmb_mode_1();
bool tmb_mode_2();
bool tmb_mode_3();

bool tmb_loop(int mode = -1){
  /*
    modes are:
    1 - turn all on
    2 - turn on only one color
    3 - get 21 (RED = 5, GREEN = 7, BLUE = 4, FUKSIA = 6, WHITE = 1)
                hint(RRGB, FFRB, BBFG, WFGG, WBRRF, WBBFF, WBBRG, WWFFG, WWRGG, WWBBRF)
  */
 Serial.print("tmb_loop ");
 Serial.println(tmb_mode);
  if(mode == -1){
    if(tmb_mode == 1 && tmb_mode_1()){
      //power ++;
      tmb_mode = 3;
    } else if(tmb_mode == 3 && tmb_mode_2()){
      //power ++;
      tmb_mode = 4;
    } else if(tmb_mode == 4 && tmb_mode_3()){
      //power ++;
      tmb_mode = 2;
    }
  }

  if(mode == 1 && tmb_mode_1()){
      //power ++;
    tmb_mode = 2;
    return true;
  } else if(mode == 2 && tmb_mode_2()){
      //power ++;
    tmb_mode = 2;
    return true;
  } else if(mode == 3 && tmb_mode_3()){
      //power ++;
    tmb_mode = 2;
    return true;
  }

  return false;
}

bool tmb_mode_1(){
  Serial.println("tmb_mode_1");
  // mode identefication G->G
  strip.setPixelColor(side_leds[0], GREEN);
  strip.setPixelColor(side_leds[1], GREEN);
  bool _done = true;
  for(int i = 0; i < 10; i++){
    if(digitalRead(tmb_pins[i]) == tmb_data[i]){
      strip.setPixelColor(tmb_leds[i], tmb_colors[i]);
    } else {
      strip.setPixelColor(tmb_leds[i], 0, 0, 0);
      _done = false;
    }
  }
  strip.show();
  return _done;
}

uint32_t tmb_mode2_color;
bool tmb_mode2_chosen = false;
bool tmb_mode_2(){
  // mode identefication B->COLOR
  if(!tmb_mode2_chosen){
    tmb_mode2_chosen = true;
    tmb_mode2_color = tmb_colors[random(0, 10)];
  }
  strip.setPixelColor(side_leds[0], BLUE);
  strip.setPixelColor(side_leds[1], tmb_mode2_color);
  strip.show();
  bool _done = true;
  for(int i = 0; i < 10; i++){
    if(digitalRead(tmb_pins[i]) == tmb_data[i]){
      strip.setPixelColor(tmb_leds[i], tmb_colors[i]);
      if(tmb_colors[i] != tmb_mode2_color){
        _done = false;
      }
    } else {
      strip.setPixelColor(tmb_leds[i], 0, 0, 0);
      if(tmb_colors[i] == tmb_mode2_color){
        _done = false;
      }
    }
  }
  strip.show();
  return _done;
}

bool tmb_mode_3(){
  // mode identefication G->B/R (B <21 R >21)
  strip.setPixelColor(side_leds[0], GREEN);
  uint8_t sum = 0;
  for(int i = 0; i < 10; i++){
    if(digitalRead(tmb_pins[i]) == tmb_data[i]){
      strip.setPixelColor(tmb_leds[i], tmb_colors[i]);
      // switch doesn't work, bitch
      if(tmb_colors[i] == RED){
        sum += 5;
      } else if (tmb_colors[i] == GREEN){
        sum += 7;
      } else if (tmb_colors[i] == BLUE){
        sum += 4;
      } else if (tmb_colors[i] == FUKSIA){
        sum += 6;
      } else if (tmb_colors[i] == WHITE){
        sum += 1;
      }
      Serial.println(sum);
    } else {
      strip.setPixelColor(tmb_leds[i], 0, 0, 0);
    }
  }
  strip.show();
  if(sum == 21){
    return true;
  } else if (sum < 21){
    strip.setPixelColor(side_leds[1], BLUE);
  } else {
    strip.setPixelColor(side_leds[1], RED);
  }
  strip.show();
  return false;
}

void tmb_done(){
  for(int i = 0; i < 10; i++){
    // Random near white
    strip.setPixelColor(tmb_leds[i], random(220, 255),random(220, 255),random(220, 255));
    strip.show();
  }
}

// =============================== Rotator and button

/*
  Notes:
  rotator should be turned on exact position, then
  button should be pressed as many times as led flashed when led is lit.
*/

// side_leds[1] is what i need
uint8_t rot_potent = A0;
uint8_t rot_btn = 46; // btn pin
uint8_t rot_mode = 0;
uint8_t rot_counter;
uint8_t rot_btn_times;
uint16_t rot_potent_target = 25565;
uint16_t rot_potent_dif = 10;
unsigned long rot_timer;

bool rot_start(){
  randomSeed(millis());
  rot_mode = 1;
  rot_counter = 0;
  return true;
}

bool rot_waitBtn(){
  static bool btn_flag = false;
  if(!btn_flag && digitalRead(rot_btn) == LOW){
    btn_flag = true;
  } else if (btn_flag && digitalRead(rot_btn) == HIGH){
    btn_flag = false;
    return true;
  }
  return false;
}

bool rot_loop(){
  static unsigned long timer;
  randomSeed(millis()+ analogRead(A1) + analogRead(A2) + analogRead(A3) + millis());
  if(rot_mode == 1){
    if(rot_potent_target == 25565){
      rot_potent_target = random(0,1024);
    }
    uint16_t rot_potent_now = analogRead(rot_potent);
    uint8_t green = 0;
    if(abs(rot_potent_target - rot_potent_now) < rot_potent_dif){
      green = 255;
      rot_timer = millis();
      rot_mode = 3;
    }
    strip.setPixelColor(side_leds[1], 255 - abs(rot_potent_target-rot_potent_now)/4, green, 0);
    strip.show();
  } else if(rot_mode == 3){
    uint16_t rot_potent_now = analogRead(rot_potent);
    uint8_t green = 0;
    if(abs(rot_potent_target - rot_potent_now) < rot_potent_dif){
      green = 255;
    }
    strip.setPixelColor(side_leds[1], 255 - abs(rot_potent_target-rot_potent_now)/4, green, 0);
    if(millis() - rot_timer > 200){
      strip.setPixelColor(side_leds[1], 0, green, 0);
      rot_mode = 4;
      strip.show();
    }
    strip.show();
  } else if(rot_mode == 4 && rot_waitBtn()){
    timer = millis();
    rot_mode = 5;
  } else if(rot_mode == 5){
    if(millis()-timer <= 500){
      strip.setPixelColor(side_leds[1], 255-int(millis()-timer)/2.5, int(millis()-timer)/2.5, 0);
      strip.show();
    } else {
      return true;
    }
  }

  return false;
}


void rot_done(){
  strip.setPixelColor(side_leds[1], 0, analogRead(rot_potent)/4, 0);
  strip.show();
}


// =============================== LED&KEY


uint8_t lnk_DIO = 49;
uint8_t lnk_CLK = 47;
uint8_t lnk_STB = 45;
TM1638 lnk_module(lnk_DIO, lnk_CLK, lnk_STB);
int lnk_mode= 0;
bool lnk_started = false;
/**
 *
 *[/] 0. Push button which diode is lit on                         ! work
 *          Impossible and not understandable fail
 * 
 *[X] 1. Push buttons to turn all leds on                          ! work
 * 
 *[X] 2. Simon says                                            ! work ??
 * 
 *[X] 3. Push buttons to get sum of 21                             ! work
 * 
 *[X] 4. button change digit. Right digit - led on. all leds - win ! work
 * 
 *[X] w. Simply wait           (lnk_waiter())                                    ! work
 *
 *[ ] 5. Balance the decode path                                   ! Not done
 * 
*/


int get_button(){
  byte btns = lnk_module.getButtons();
  static byte memory;
  if(btns != 0){
    memory = btns;
  }
  if(btns == 0 && memory != 0){
    for(int i = 0; i < 8; i++){
      if((memory & 1) == 1){
        memory = 0;
        return i;
      }
      memory >>= 1;
    }
  }
  return -1;
}


bool mode0(){
  if(!lnk_started){
    lnk_module.setDisplayToString(" REPEAT ");
    lnk_module.setLEDs(0);
    lnk_started = true;
  }
  static int retries = random(10,15);
  static int led = random(8);
  if(retries <= 0){
    lnk_module.setLEDs(0);
    lnk_started = false;
    return true;
  }
  lnk_module.setLEDs(0);
  lnk_module.setLED(1, led);
  int btn = get_button();
  if(btn >= 0 && btn != led){
    //failure
    led = random(8);
  }
  if(btn == led){
    led = random(8);
    retries--;
  }
  return false;
}

bool mode1(){
  static bool leds[8];
  if(!lnk_started){
    lnk_module.setDisplayToString(" ALL ON ");
    lnk_module.setLEDs(0);
    for(int i = 0; i < 8; i++){
      leds[i] = random(2);
      if(leds[i] == 1){
        lnk_module.setLED(1, i);
      } else {
        lnk_module.setLED(0, i);
      }
    }
    lnk_started = true;
  }
  int sum;
  sum = 0;
  int btn = get_button();
  if(btn != -1){
    leds[btn] = !leds[btn];
  }
  for(int i = 0; i < 8; i++){
    if(leds[i] == 1){
        lnk_module.setLED(1, i);
        sum++;
      } else {
        lnk_module.setLED(0, i);
      }
  }
  if(sum == 8){
    lnk_module.setLEDs(0);
    lnk_started = false;
    return true;
  }
  return false;
}

bool mode2(){
  static int order[6] = {-1,};
  static int ordered = -2; // -2 - not init, -1 - not shown, 0-5 index
  static bool waiting = false;
  static unsigned long timer = millis();
  if(!lnk_started){
    lnk_module.setDisplayToString(" REPEAT ");
    lnk_module.setLEDs(0);
    lnk_started = true;
  }
  if(ordered == -2){
    for(int i = 0; i < 6; i++){
      order[i] = random(8);
    }
    ordered = -1;
  }
  if(ordered == -1){
    ordered = 0;
    for(int i = 0; i < 6; i++){
      Serial.print(order[i]);
    }
    Serial.println();
    lnk_module.setLED(1, order[ordered]);
    timer = millis();
  }
  if(!waiting){
    if(millis()-timer < 750){
      return false;
    }
    ordered++;
    if(ordered <= 5){
      lnk_module.setLEDs(0);
      lnk_module.setLED(1, order[ordered]);
      timer = millis();
    }else{
      ordered = 0;
      waiting = true;
      lnk_module.setLEDs(0);
    }
  }
  if(waiting){
    int btn = get_button();
    if(btn != -1 && btn != order[ordered]){
      Serial.print(order[ordered]);
      Serial.print(" ");
      Serial.println(btn);
      waiting = false;
      ordered = -1;
      lnk_module.setLEDs(0xFF);
      delay(20);
      return false;
    } else if (btn == order[ordered]){
      lnk_module.setLED(1, order[ordered]);
      delay(5);
      lnk_module.setLEDs(0);
      ordered++;
    }
    if(ordered == 6){
      lnk_module.setLEDs(0);
      lnk_started = false;
      return true;
    }
  }
  return false;

}

bool mode3(){
  static bool leds[8] = {0,0,0,0,0,0,0,0};
  static int leds_n[8] = {1,2,3,4,5,6,7,8};
  int sum = 0;
  if(!lnk_started){
    for(int i = 0; i < 8; i++){
      int j = random(8);
      int _temp = leds_n[i];
      leds_n[i] = leds_n[j];
      leds_n[j] = _temp;
    }
    lnk_module.setLEDs(0);
    lnk_started = true;
    lnk_module.setDisplayToString("     |21");
  }
  int btn = get_button();
  if(btn != -1){
    leds[btn] = !leds[btn];
  }
  for(int i = 0; i < 8; i++){
    if(leds[i]){
      lnk_module.setLED(1, i);
      sum += leds_n[i];
    } else {
      lnk_module.setLED(0, i);
    }
  }
  lnk_module.clearDisplayDigit(0,0);
  lnk_module.clearDisplayDigit(1,0);
  lnk_module.setDisplayToString(String(sum));
  if(sum == 21){
    lnk_module.setLEDs(0);
    lnk_started = false;
    return true;
  }
  return false;
}

bool mode4(){
  static int lcd_dig[8] = {0,0,0,0,0,0,0,0};
  static int lcd_targ[8];
  static unsigned long timer = millis();
  static bool waiting = false;
  if(!lnk_started){
    for(int i = 0; i < 8; i++){
      lcd_targ[i] = random(10);
    }
    lnk_module.setDisplayToString("00000000");
    lnk_started = true;
  }
  int sum;
  sum = 0;
  int btn = get_button();
  if(btn != -1){
    lcd_dig[btn]++;
    lcd_dig[btn] %= 10;
    lnk_module.setDisplayDigit(lcd_dig[btn], btn, 0);
  }
  for(int i = 0; i < 8; i++){
    if(lcd_dig[i] == lcd_targ[i]){
      lnk_module.setLED(1, i);
      sum++;
    } else {
      lnk_module.setLED(0, i);
    }
  }
  if(sum == 8 && !waiting){
    timer = millis();
    waiting = true;
  } else if(sum == 8 && waiting && millis()-timer >= 500){
    lnk_module.setLEDs(0);
    lnk_started = false;
    return true;
  }
  return false;
}

void mode5(){
  //NOT DONE!
}

void lnk_waiter(){
  if(lnk_started){return;}
  static unsigned long timer = millis() - random(0,1000);
  static int digits[8] = {0,0,0,0,0,0,0};
  for(int i = 0; i < 8; i++){
    lnk_module.setDisplayDigit(digits[i], i, false);
  }
  if(millis() - timer >= 2000){
    timer = millis() - random(0,1000);
    digits[random(8)] = random(10);
  }
}

bool lnk_loop(int mode){
  if(mode == 0){
    return mode0();
  } else if(mode == 1){
    return mode1();
  } else if(mode == 2){
    return mode2();
  } else if(mode == 3){
    return mode3();
  } else if(mode == 4){
    return mode4();
  }
  return false;
}


// =============================== Fucking shit for noobs
void setup() {
  pinMode(rot_btn, INPUT_PULLUP);
  pinMode(rot_potent, INPUT);
  strip.setBrightness(128); // 50%
  Serial.begin(9600);
  strip.begin();
  randomSeed(millis() + analogRead(A5) + analogRead(A3));
  for(int i = 0; i < LED_NUM + 3; i++){
    if(i < LED_NUM){
      strip.setPixelColor(i, WHITE);
    }
    if(i-3 >= 0){
      strip.setPixelColor(i-3, 10,15,15);
    }
    strip.show();
    delay(20);
  }
  wires_start();
  tmb_start();
}

void loop() {
  static int order[14] = {0, 5, 1, 6, 2, 10, 8, 3, 10, 9, 4, 10, 0, 8};
  /*
    order:
      0 - button
      1 - wires
      2 - tumblers(1)
      3 - tumblers(2)
      4 - tumblers(3)
      5 - lnk(0) (repeat)
      6 - lnk(1) (all on)
      7 - lnk(2) (simon)
      8 - lnk(3) (21)
      9 - lnk(4) (digits)
      10 - rotator

  */
  static int ind = 0;

  switch(order[ind]){
    case 0:
      if(rot_waitBtn()){
        ind++;
      }
      break;
    case 1:
      if(wires_loop()){
        ind++;
      }
      break;
    case 2:
      if(tmb_loop(1)){
        ind++;
      }
      break;
    case 3:
      if(tmb_loop(2)){
        ind++;
      }
      break;
    case 4:
      if(tmb_loop(3)){
        ind++;
      }
      break;
    case 5:
      if(lnk_loop(0)){
        ind++;
      }
      break;
    case 6:
      if(lnk_loop(1)){
        ind++;
      }
      break;
    case 7:
      if(lnk_loop(2)){
        ind++;
      }
      break;
    case 8:
      if(lnk_loop(3)){
        ind++;
      }
      break;
    case 9:
      if(lnk_loop(4)){
        ind++;
      }
      break;
    case 10:
      if(rot_loop()){
        ind++;
      }
      break;
  }

  if(wires_mode == 2){
    wires_done();
  }
  if(ind > 4){
    tmb_loop();
  }
  if(ind != 5 && ind != 6 && ind != 7 && ind != 8 && ind != 9){
    lnk_waiter();
  }
  if(ind != 10){
    rot_done();
  }

  int full = ind/3;
  for(int i = 0; i <= full; i++){
    strip.setPixelColor(power_leds[i], 0, 255, 0);
  }
  if(ind == 13){
    strip.setPixelColor(power_leds[4], 0, 255, 0);
  }
  strip.show();

}